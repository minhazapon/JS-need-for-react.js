/**
 * JavaScript-এর Higher-Order Functions → map(), filter(), reduce() (বাংলায় ব্যাখ্যা)
Higher-Order Functions কি?
JavaScript-এ Higher-Order Function হলো এমন ফাংশন যা অন্য ফাংশনকে প্যারামিটার হিসেবে গ্রহণ করতে পারে বা ফাংশন রিটার্ন করতে পারে।

➡️ map(), filter(), এবং reduce() হল তিনটি গুরুত্বপূর্ণ Higher-Order Function, যা মূলত array-তে বিভিন্ন রকমের অপারেশন করতে ব্যবহৃত হয়।

১. map() → প্রতিটি এলিমেন্টকে পরিবর্তন করে নতুন অ্যারে তৈরি করে
📌 map() ফাংশন একটি নতুন অ্যারে তৈরি করে, যেখানে প্রতিটি এলিমেন্টকে নির্দিষ্ট নিয়ম অনুযায়ী পরিবর্তন করা হয়।

🔹 সংকৃপ্তভাবে:

প্রতিটি এলিমেন্টের উপর একটি নির্দিষ্ট ফাংশন প্রয়োগ করে।
মূল অ্যারেকে পরিবর্তন করে না, বরং নতুন অ্যারে তৈরি করে।
js
Copy
Edit
const numbers = [1, 2, 3, 4, 5];

const doubled = numbers.map(num => num * 2);

console.log(doubled);  // Output: [2, 4, 6, 8, 10]
🔹 এখানে প্রতিটি সংখ্যাকে দ্বিগুণ করে নতুন একটি অ্যারে তৈরি হয়েছে।

২. filter() → নির্দিষ্ট শর্ত অনুযায়ী এলিমেন্ট বাছাই করে
📌 filter() একটি নতুন অ্যারে তৈরি করে, যেখানে শুধু সেই এলিমেন্টগুলো থাকে যা নির্দিষ্ট শর্ত পূরণ করে।

🔹 সংকৃপ্তভাবে:

প্রতিটি এলিমেন্টের উপর একটি শর্ত প্রয়োগ করা হয়।
যে সকল এলিমেন্ট শর্ত পূরণ করে, কেবল সেগুলো নতুন অ্যারেতে রাখা হয়।
js
Copy
Edit
const numbers = [1, 2, 3, 4, 5, 6, 7, 8];

const evenNumbers = numbers.filter(num => num % 2 === 0);

console.log(evenNumbers);  // Output: [2, 4, 6, 8]
🔹 এখানে শুধু জোড় সংখ্যা ফিল্টার করা হয়েছে।

৩. reduce() → সব এলিমেন্টকে একটি মানে কমিয়ে আনে
📌 reduce() অ্যারের সব এলিমেন্ট নিয়ে একটি একক মানে কমিয়ে আনে, যেমন সংখ্যা যোগ করা, গড় বের করা, ইত্যাদি।

🔹 সংকৃপ্তভাবে:

প্রতিটি এলিমেন্ট নিয়ে আগের মানের সাথে কিছু অপারেশন করে।
একটি একক মান (সংখ্যা, অবজেক্ট, অ্যারে ইত্যাদি) প্রদান করে।
js
Copy
Edit
const numbers = [1, 2, 3, 4, 5];

const sum = numbers.reduce((acc, num) => acc + num, 0);

console.log(sum);  // Output: 15
🔹 এখানে সমস্ত সংখ্যার যোগফল বের করা হয়েছে।

map(), filter(), ও reduce() এর পার্থক্য
Function	কি করে?	নতুন অ্যারে তৈরি করে?	প্রাথমিক মান নেয়?
map()	প্রতিটি এলিমেন্টকে পরিবর্তন করে	✅ হ্যাঁ	❌ না
filter()	নির্দিষ্ট শর্ত অনুযায়ী এলিমেন্ট বাছাই করে	✅ হ্যাঁ	❌ না
reduce()	সমস্ত এলিমেন্টের উপর অপারেশন চালিয়ে একটি মান তৈরি করে	❌ না	✅ হ্যাঁ
উদাহরণ: তিনটিকে একসাথে ব্যবহার করা
ধরুন, আমাদের একটি অ্যারে আছে যেখানে বয়স দেওয়া আছে। আমরা চাই:
1️⃣ প্রথমে ১৮ বছরের বেশি বয়সীদের খুঁজবো → filter()
2️⃣ এরপর তাদের বয়স ২ দিয়ে গুণ করবো → map()
3️⃣ সবশেষে সব বয়স যোগ করবো → reduce()

js
Copy
Edit
const ages = [12, 18, 22, 30, 15, 25, 40];

const total = ages
    .filter(age => age > 18)  // [22, 30, 25, 40]
    .map(age => age * 2)       // [44, 60, 50, 80]
    .reduce((acc, age) => acc + age, 0); // 234

console.log(total);  // Output: 234
উপসংহার
map() → প্রতিটি এলিমেন্ট পরিবর্তন করে নতুন অ্যারে তৈরি করে।
filter() → নির্দিষ্ট শর্ত অনুযায়ী কিছু এলিমেন্ট রেখে নতুন অ্যারে তৈরি করে।
reduce() → সব এলিমেন্ট নিয়ে একটি একক মান তৈরি করে।
🚀 এই তিনটি ফাংশন JavaScript-এ ফাস্ট এবং কার্যকর উপায়ে ডাটা প্রসেসিং করার জন্য অনেক বেশি ব্যবহৃত হয়!
 */


////map////


const mapFunc = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

const ReturnS = mapFunc.map(num => num * 2)

console.log(ReturnS)